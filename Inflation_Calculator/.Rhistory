state_list_w_subregions_df = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv") #THIS PROBABLY NEEDS TO BE ON GITHUB
states_w_subregions = state_list_w_subregions_df$state
print(states_w_subregions)
full_state_list = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/states_w_metro_areas.csv")
# load hash package
library(hash)
#set hash function to "h" for ease of reading.
h <- hash()
for (state in states_w_subregions) {
if ("Alaska" %in% state) {
h[["Alaska"]] <- "Urban Alaska"
}
if ("Arizona" %in% state) {
h[["Arizona"]] <- "Phoenix-Mesa-Scottsdale"
}
if ("California" %in% state) {
h[["California"]] <- list("Los Angeles" = "Los Angeles-Long Beach-Anaheim",
"Riverside" = "Riverside-San Bernardino-Ontario",
"San Diego" = "San Diego-Carlsbad",
"San Francisco" = "San Francisco-Oakland-Hayward")
}
if ("Colorado" %in% state) {
h[["Colorado"]] <- "Denver-Aurora-Lakewood"
}
if ("Delaware" %in% state) {
h[["Delaware"]] <- "Philadelphia-Camden-Wilmington"
}
if ("District of Columbia" %in% state) {
h[["District of Columbia"]] <- "Washington-Arlington-Alexandria"
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
}
# print(state)
}
print(states_w_subregions)
library(shiny)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list),
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
shinyApp(ui,server = server)
states_with_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv") #THIS PROBABLY NEEDS TO BE ON GITHUB
states_with_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
print(states_with_metro_areas)
print(all_states)
all_states = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
print(all_states)
states_w_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/states_w_metro_areas.csv")
print(states_w_metro_areas)
print(states_with_metro_areas)
View(h)
keys("Florida")
all_states = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
states_w_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/states_w_metro_areas.csv")
print(states_w_metro_areas)
# load hash package
library(hash)
#set hash function to "h" for ease of reading.
h <- hash()
for (state in states_w_metro_areas) {
if ("Alaska" %in% state) {
h[["Alaska"]] <- "Urban Alaska"
}
if ("Arizona" %in% state) {
h[["Arizona"]] <- "Phoenix-Mesa-Scottsdale"
}
if ("California" %in% state) {
h[["California"]] <- list("Los Angeles" = "Los Angeles-Long Beach-Anaheim",
"Riverside" = "Riverside-San Bernardino-Ontario",
"San Diego" = "San Diego-Carlsbad",
"San Francisco" = "San Francisco-Oakland-Hayward")
}
if ("Colorado" %in% state) {
h[["Colorado"]] <- "Denver-Aurora-Lakewood"
}
if ("Delaware" %in% state) {
h[["Delaware"]] <- "Philadelphia-Camden-Wilmington"
}
if ("District of Columbia" %in% state) {
h[["District of Columbia"]] <- "Washington-Arlington-Alexandria"
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
}
}
keys("Florida")
values("Florida")
values("Florida")
library(hash)
## hash-2.2.6 provided by Decision Patterns
h <- hash()
# set values
h[["1"]] <- 42
h[["foo"]] <- "bar"
h[["4"]] <- list(a=1, b=2)
# get values
h[["1"]]
## [1] 42
h[["4"]]
h[["Florida"]]
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
if ("District of Columbia" %in% state) {
h[["District of Columbia"]] <- "Washington-Arlington-Alexandria"
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
}
for (state in states_w_metro_areas) {
if ("Alaska" %in% state) {
h[["Alaska"]] <- "Urban Alaska"
}
if ("Arizona" %in% state) {
h[["Arizona"]] <- "Phoenix-Mesa-Scottsdale"
}
if ("California" %in% state) {
h[["California"]] <- list("Los Angeles" = "Los Angeles-Long Beach-Anaheim",
"Riverside" = "Riverside-San Bernardino-Ontario",
"San Diego" = "San Diego-Carlsbad",
"San Francisco" = "San Francisco-Oakland-Hayward")
}
if ("Colorado" %in% state) {
h[["Colorado"]] <- "Denver-Aurora-Lakewood"
}
if ("Delaware" %in% state) {
h[["Delaware"]] <- "Philadelphia-Camden-Wilmington"
}
if ("District of Columbia" %in% state) {
h[["District of Columbia"]] <- "Washington-Arlington-Alexandria"
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
}
}
h[["Florida"]]
View(ui)
all_states = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
states_w_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/states_w_metro_areas.csv")
print(states_w_metro_areas)
# load hash package
library(hash)
# load hash package
library(hash)
#set hash function to "h" for ease of reading.
h <- hash()
for (state in states_w_metro_areas) {
if ("Alaska" %in% state) {
h[["Alaska"]] <- "Urban Alaska"
}
if ("Arizona" %in% state) {
h[["Arizona"]] <- "Phoenix-Mesa-Scottsdale"
}
if ("California" %in% state) {
h[["California"]] <- list("Los Angeles" = "Los Angeles-Long Beach-Anaheim",
"Riverside" = "Riverside-San Bernardino-Ontario",
"San Diego" = "San Diego-Carlsbad",
"San Francisco" = "San Francisco-Oakland-Hayward")
}
if ("Colorado" %in% state) {
h[["Colorado"]] <- "Denver-Aurora-Lakewood"
}
if ("Delaware" %in% state) {
h[["Delaware"]] <- "Philadelphia-Camden-Wilmington"
}
if ("District of Columbia" %in% state) {
h[["District of Columbia"]] <- "Washington-Arlington-Alexandria"
}
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
if ("Georgia" %in% state) {
h[["Georgia"]] <- "Atlanta-Sandy Springs-Roswell"
}
if ("Hawaii" %in% state) {
h[["Hawaii"]] <- "Urban Hawaii"
}
if ("Illinois" %in% state) {
h[["Illinois"]] <- list("Chicago" = "Chicago-Naperville-Elgin",
"St. Louis" = "St. Louis")
}
if ("Indiana" %in% state) {
h[["Indiana"]] <- "Chicago-Naperville-Elgin"
}
if ("Maryland" %in% state) {
h[["Maryland"]] <- list("Baltimore" = "Baltimore-Columbia-Towson",
"Philadelphia" = "Philadelphia-Camden-Wilmington",
"Washington D.C." = "Washington-Arlington-Alexandra")
}
if ("Massachusetts" %in% state) {
h[["Maassachusetts"]]  <- "Boston-Cambridge-Newton"
}
if ("Michigan" %in% state) {
h[["Michigan"]] <- "Detroit-Warren-Dearborn"
}
if ("Minnesota" %in% state) {
h[["Minnesota"]] <- "Minneapolis-St.Paul-Bloomington"
}
if ("Missouri" %in% state) {
h[["Missouri"]] <- "St. Louis"
}
if ("New Hampshire" %in% state) {
h[["New Hampshire"]] <- "Boston-Cambridge-Newton"
}
if ("New Jersey" %in% state) {
h[["New Jersey"]] <- list("New York-Newark-Jersey City",
"Philadelphia-Camden-Wilmington")
}
if ("New York" %in% state) {
h[["New York"]] <-"New York-Newark-Jersey City"
}
if ("Pennsylvania" %in% state){
h[["Pennsylvania"]] <- list("New York-Newark-Jersey City",
"Philadelphia-Camden-Wilmington")
}
if ("Texas" %in% state) {
h[["Texas"]] <- list("Dallas-Fort Worth-Arlington",
"Houston-The Woodlands-Sugar Land")
}
if ("Virginia" %in% state) {
h[["Virginia"]] <- "Washington-Arlington-Alexandria"
}
if ("Washington" %in% state) {
h[["Washington"]] <- "Seattle-Tacoma-Bellevue"
}
if ("West Virginia" %in% state) {
h[["West Virginia"]] <- "Washington-Arlington-Alexandria"
}
if ("Wisconsin" %in% state) {
h[["Wisconsin"]] <- list("Chicago-Naperville-Elgin",
"Minneapolis-St.Paul-Bloomington")
}
}
h[["Wisconsin"]] #MAKE SURE VALUES ARE HASHED TO KEY
library(shiny)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list),
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
shinyApp(ui,server = server)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list),
selectInput(inputId = "select",
label + "Choose your metro area of residence, if applicable",
choices = h[["Wisconsin"]])
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list),
selectInput(inputId = "select",
labels = "Choose your metro area of residence, if applicable",
choices = h[["Wisconsin"]])
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
shinyApp(ui,server = server)
library(shiny)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list) +
selectInput(inputId = "select",
labels = "Choose your metro area of residence, if applicable",
choices = h[["Wisconsin"]])
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
shinyApp(ui,server = server)
library(shinyjs)
ui <- fluidPage(selectInput
(inputId = "select",
label = "Choose your state or territory of your residence",
choices = full_state_list)
)
server <- function(input, output, session){
}
shinyApp(ui,server = server)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list) +
selectInput(inputId = "select",
labels = "Choose your metro area of residence, if applicable",
choices = h[["Wisconsin"]])
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
all_states = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
states_w_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/states_w_metro_areas.csv")
# load hash package
library(hash)
#set hash function to "h" for ease of reading.
h <- hash()
for (state in states_w_metro_areas) {
if ("Alaska" %in% state) {
h[["Alaska"]] <- "Urban Alaska"
}
if ("Arizona" %in% state) {
h[["Arizona"]] <- "Phoenix-Mesa-Scottsdale"
}
if ("California" %in% state) {
h[["California"]] <- list("Los Angeles" = "Los Angeles-Long Beach-Anaheim",
"Riverside" = "Riverside-San Bernardino-Ontario",
"San Diego" = "San Diego-Carlsbad",
"San Francisco" = "San Francisco-Oakland-Hayward")
}
if ("Colorado" %in% state) {
h[["Colorado"]] <- "Denver-Aurora-Lakewood"
}
if ("Delaware" %in% state) {
h[["Delaware"]] <- "Philadelphia-Camden-Wilmington"
}
if ("District of Columbia" %in% state) {
h[["District of Columbia"]] <- "Washington-Arlington-Alexandria"
}
if ("Florida" %in% state) {
h[["Florida"]] <- list("Tampa" = "Tampa-St. Petersburg-Clearwater",
"Miami" = "Miami-Fort Lauderdale-West Palm Beach")
}
if ("Georgia" %in% state) {
h[["Georgia"]] <- "Atlanta-Sandy Springs-Roswell"
}
if ("Hawaii" %in% state) {
h[["Hawaii"]] <- "Urban Hawaii"
}
if ("Illinois" %in% state) {
h[["Illinois"]] <- list("Chicago" = "Chicago-Naperville-Elgin",
"St. Louis" = "St. Louis")
}
if ("Indiana" %in% state) {
h[["Indiana"]] <- "Chicago-Naperville-Elgin"
}
if ("Maryland" %in% state) {
h[["Maryland"]] <- list("Baltimore" = "Baltimore-Columbia-Towson",
"Philadelphia" = "Philadelphia-Camden-Wilmington",
"Washington D.C." = "Washington-Arlington-Alexandra")
}
if ("Massachusetts" %in% state) {
h[["Maassachusetts"]]  <- "Boston-Cambridge-Newton"
}
if ("Michigan" %in% state) {
h[["Michigan"]] <- "Detroit-Warren-Dearborn"
}
if ("Minnesota" %in% state) {
h[["Minnesota"]] <- "Minneapolis-St.Paul-Bloomington"
}
if ("Missouri" %in% state) {
h[["Missouri"]] <- "St. Louis"
}
if ("New Hampshire" %in% state) {
h[["New Hampshire"]] <- "Boston-Cambridge-Newton"
}
if ("New Jersey" %in% state) {
h[["New Jersey"]] <- list("New York-Newark-Jersey City",
"Philadelphia-Camden-Wilmington")
}
if ("New York" %in% state) {
h[["New York"]] <-"New York-Newark-Jersey City"
}
if ("Pennsylvania" %in% state){
h[["Pennsylvania"]] <- list("New York-Newark-Jersey City",
"Philadelphia-Camden-Wilmington")
}
if ("Texas" %in% state) {
h[["Texas"]] <- list("Dallas-Fort Worth-Arlington",
"Houston-The Woodlands-Sugar Land")
}
if ("Virginia" %in% state) {
h[["Virginia"]] <- "Washington-Arlington-Alexandria"
}
if ("Washington" %in% state) {
h[["Washington"]] <- "Seattle-Tacoma-Bellevue"
}
if ("West Virginia" %in% state) {
h[["West Virginia"]] <- "Washington-Arlington-Alexandria"
}
if ("Wisconsin" %in% state) {
h[["Wisconsin"]] <- list("Chicago-Naperville-Elgin",
"Minneapolis-St.Paul-Bloomington")
}
}
h[["Wisconsin"]] #MAKE SURE VALUES ARE HASHED TO KEY
library(shiny)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list) +
selectInput(inputId = "select",
labels = "Choose your metro area of residence, if applicable",
choices = h[["Wisconsin"]])
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
ui <- fluidPage(
selectInput(inputId = "select",
label = "Choose your state or territory of residence",
choices = full_state_list)
#NEED SOME SORT OF CONDITIONAL PANEL HERE
)
server <- function(input, output, session){
}
shinyApp(ui,server = server)
library(shiny)
shinyUI(fluidPage(
titlePanel("Demonstration of the selectInput UI widget in shiny"),
sidebarlayout(
sidebarPanel(),
mainPanel()
)
))
shinyUI(fluidPage(
titlePanel("Demonstration of the selectInput UI widget in shiny"),
sidebarLayout(
sidebarPanel(),
mainPanel()
)
))
shiny::runApp()
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping_app.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator')
runApp('Documents/GitHub/inflation_calculator/inflation_calculator/ui.R')
runApp('Documents/GitHub/inflation_calculator')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
source('Documents/GitHub/inflation_calculator/geographic_data_mapping.R')
shiny::runApp('Documents/GitHub/inflation_calculator/Inflation_Calculator')
all_states = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
print(all_states)
states_w_metro_areas = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/states_w_metro_areas.csv")
all_states = read.csv("/Users/rodrigoguerrero/Documents/GitHub/inflation_calculator/full_state_list.csv")
print(all_states)
runApp('Documents/GitHub/inflation_calculator/Inflation_Calculator')
runApp('Documents/GitHub/inflation_calculator/Inflation_Calculator')
runApp('Documents/GitHub/inflation_calculator/Inflation_Calculator')
